<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Andrew McDonough]]></title>
  <link href="http://andrewmcdonough.github.com/atom.xml" rel="self"/>
  <link href="http://andrewmcdonough.github.com/"/>
  <updated>2012-02-25T00:17:23+00:00</updated>
  <id>http://andrewmcdonough.github.com/</id>
  <author>
    <name><![CDATA[Andrew McDonough]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Ruby Poetry]]></title>
    <link href="http://andrewmcdonough.github.com/blog/2012/02/23/ruby-poetry/"/>
    <updated>2012-02-23T21:02:00+00:00</updated>
    <id>http://andrewmcdonough.github.com/blog/2012/02/23/ruby-poetry</id>
    <content type="html"><![CDATA[<p>On Tuesday evening, I gave a 20 slide &#8216;lightning talk&#8217; at the <a href='http://lrug.org'>London Ruby Users Group (LRUG)</a> entitled &#8220;Ruby Poetry&#8221;.  Inspired by <a href='http://twitter.com/hlame'>Murray Steele</a>&#8217;s &#8221;<a href='http://skillsmatter.com/podcast/ajax-ria/my-first-ruby'>My First Ruby</a>&#8221; talk at a previous LRUG, I decided to tell a story about a small progam I wrote about five years ago, when I was fairly new to Ruby.  At the time, I had just made the transition to Ruby after years as Java developer, and I was amazed at how easy it was to solve problems without having to write very much code.</p>

<p>The story starts when I was invited to a party.  The party was a themed <a href='http://en.wikipedia.org/wiki/Burns_supper'>Burns Night</a> dinner.  These celebrations are common in Scotland to celebrate the life and poetry of <a href='http://en.wikipedia.org/wiki/Robert_Burns'>Robert Burns</a>.  I had been invited to the same party the previous year, and remembered back to enjoying the haggis and whisky.  One thing I recalled that had not felt particularly comfortable with, is that I had been asked to bring a poem to read.  On the evening, instead of bringing poems from books, most people had written their own, and I felt bad for lacking creativity.  I decided that this time around, I would try to be creative in my own way, and wrote a Ruby program to generate some topical poetry from the day&#8217;s news headlines.  I won&#8217;t go into too much detail here, as my five minute talk  <a href='http://skillsmatter.com/podcast/home/lrug-custom-documentation-generators'>was kindly videoed by Skills Matter</a>:</p>

<center><a href='http://skillsmatter.com/podcast/home/lrug-custom-documentation-generators'><img src='http://andrewmcdonough.github.com/images/blog/poetry/video.png' /></a></center>


<h2>generate_topical_rhyming_couplets.rb</h2>

<p>The code below is what I used to generate the couplets on the day.  While I had been tuning my algorithm, I wrote the headlines to a file so I didn&#8217;t have to reload them each time. The full source is <a href='https://github.com/andrewmcdonough/ruby-poetry'>on github</a>.</p>

<figure class='code'><figcaption><span>generate_topical_rhyming_couplets</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1">#!/usr/bin/env ruby</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;rss&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;open-uri&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Open the list of feeds</span>
</span><span class='line'><span class="n">fh</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="s2">&quot;feeds.txt&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">feeds</span> <span class="o">=</span> <span class="n">fh</span><span class="o">.</span><span class="n">read</span><span class="o">.</span><span class="n">split</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># For each feed, get the headlines</span>
</span><span class='line'><span class="n">headlines</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'><span class="n">feeds</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">feed</span><span class="o">|</span>
</span><span class='line'>  <span class="k">begin</span>
</span><span class='line'>    <span class="n">file</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="n">feed</span><span class="p">)</span>
</span><span class='line'>    <span class="n">rss</span> <span class="o">=</span> <span class="no">RSS</span><span class="o">::</span><span class="no">Parser</span><span class="o">.</span><span class="n">parse</span><span class="p">(</span><span class="n">file</span><span class="o">.</span><span class="n">read</span><span class="p">)</span>
</span><span class='line'>    <span class="n">feed_headlines</span> <span class="o">=</span> <span class="n">rss</span><span class="o">.</span><span class="n">items</span><span class="o">.</span><span class="n">map</span> <span class="p">{</span><span class="o">|</span><span class="n">i</span><span class="o">|</span> <span class="n">i</span><span class="o">.</span><span class="n">title</span><span class="p">}</span>
</span><span class='line'>    <span class="n">headlines</span> <span class="o">+=</span> <span class="n">feed_headlines</span>
</span><span class='line'>  <span class="k">rescue</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;Error with </span><span class="si">#{</span><span class="n">feed</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Remove duplicates and strip some prefixes</span>
</span><span class='line'><span class="n">headlines</span> <span class="o">=</span> <span class="n">headlines</span><span class="o">.</span><span class="n">uniq!</span>
</span><span class='line'><span class="n">headlines</span> <span class="o">=</span> <span class="n">headlines</span><span class="o">.</span><span class="n">map</span> <span class="p">{</span><span class="o">|</span><span class="n">h</span><span class="o">|</span> <span class="n">h</span><span class="o">.</span><span class="n">gsub</span><span class="sr"> /^(AUDIO|VIDEO): /</span><span class="p">,</span><span class="s2">&quot;&quot;</span><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Test for couplets</span>
</span><span class='line'><span class="k">def</span> <span class="nf">couplet?</span><span class="p">(</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">)</span>
</span><span class='line'>  <span class="n">as</span> <span class="o">=</span> <span class="n">a</span><span class="o">.</span><span class="n">gsub</span><span class="sr"> /\W/</span><span class="p">,</span><span class="s2">&quot;&quot;</span> <span class="c1"># Ignore punctuation</span>
</span><span class='line'>  <span class="n">bs</span> <span class="o">=</span> <span class="n">b</span><span class="o">.</span><span class="n">gsub</span><span class="sr"> /\W/</span><span class="p">,</span><span class="s2">&quot;&quot;</span>
</span><span class='line'>  <span class="n">as</span><span class="o">[-</span><span class="mi">3</span><span class="p">,</span><span class="mi">3</span><span class="o">]</span> <span class="o">==</span> <span class="n">bs</span><span class="o">[-</span><span class="mi">3</span><span class="p">,</span><span class="mi">3</span><span class="o">]</span> <span class="o">&amp;&amp;</span>
</span><span class='line'>    <span class="o">!</span><span class="p">(</span><span class="n">as</span><span class="o">[-</span><span class="mi">5</span><span class="p">,</span><span class="mi">5</span><span class="o">]</span> <span class="o">==</span> <span class="n">bs</span><span class="o">[-</span><span class="mi">5</span><span class="p">,</span><span class="mi">5</span><span class="o">]</span><span class="p">)</span> <span class="o">&amp;&amp;</span>
</span><span class='line'>    <span class="p">(</span><span class="n">as</span><span class="o">.</span><span class="n">length</span> <span class="o">-</span> <span class="n">bs</span><span class="o">.</span><span class="n">length</span><span class="p">)</span><span class="o">.</span><span class="n">abs</span> <span class="o">&lt;</span> <span class="mi">10</span> <span class="o">&amp;&amp;</span>
</span><span class='line'>    <span class="p">(</span><span class="n">as</span><span class="o">.</span><span class="n">length</span> <span class="o">&gt;</span> <span class="mi">30</span> <span class="o">&amp;&amp;</span> <span class="n">as</span><span class="o">.</span><span class="n">length</span> <span class="o">&lt;</span> <span class="mi">70</span><span class="p">)</span> <span class="o">&amp;&amp;</span>
</span><span class='line'>    <span class="p">(</span><span class="n">bs</span><span class="o">.</span><span class="n">length</span> <span class="o">&gt;</span> <span class="mi">30</span> <span class="o">&amp;&amp;</span> <span class="n">bs</span><span class="o">.</span><span class="n">length</span> <span class="o">&lt;</span> <span class="mi">70</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Sort the headlines by the last three letters</span>
</span><span class='line'><span class="n">headlines</span><span class="o">.</span><span class="n">sort!</span> <span class="p">{</span><span class="o">|</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="o">|</span>  <span class="n">a</span><span class="o">[-</span><span class="mi">3</span><span class="p">,</span><span class="mi">3</span><span class="o">]</span> <span class="o">&lt;=&gt;</span> <span class="n">b</span><span class="o">.</span><span class="n">reverse</span><span class="o">[-</span><span class="mi">3</span><span class="p">,</span><span class="mi">3</span><span class="o">]</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Iterate over the headlines, testing in pairs for couplets</span>
</span><span class='line'><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'><span class="k">while</span> <span class="p">(</span><span class="n">i</span> <span class="o">&lt;</span> <span class="n">headlines</span><span class="o">.</span><span class="n">length</span><span class="o">-</span><span class="mi">2</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">a</span> <span class="o">=</span> <span class="n">headlines</span><span class="o">[</span><span class="n">i</span><span class="o">]</span>
</span><span class='line'>  <span class="n">b</span> <span class="o">=</span> <span class="n">headlines</span><span class="o">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="o">]</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">couplet?</span><span class="p">(</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">)</span>
</span><span class='line'>    <span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">a</span><span class="si">}</span><span class="se">\n</span><span class="si">#{</span><span class="n">b</span><span class="si">}</span><span class="se">\n\n</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>As the couplet finding algorithm was fairly crude, only looking for matches of the last three letters, and not the phonetic reprentation, I allowed myself to pick the best couplets as generated on the day.  To demonstrate my code, I reran the program on the day of my talk, and read the best couplets it generated at the end:</p>

<h3>The final poem, as generated on the day of the talk</h3>

<div class='paper'>Eurozone agrees second Greek bail-out
Haye trainer rules out Chisora bout

Man released after Sunday arrest
South Sudan puts Beijing policies to the test

Young carers need more support
Green light for £100m golf resort

Lord of the Flies redesigned
&#8216;Typosquatting&#8217; prize firms fined

Football with history of conflict
Travel by train though the Lake District

Storm at C-word in BBC weather forecast
Top Irish dancers set for Belfast

Are there more strikes on the way?
I love my ID card. Can they really be taking it away?

London &#8216;second best study city&#8217;
Oil sector &#8216;needs tax stability&#8217;

Ants remember their enemy&#8217;s scent
That&#8217;s enough &#8216;kicking ass&#8217; Mr President

One-minute World News
Performance poetry - your reviews
</div>


<p>I particularly like the last one, which like the others, was genuinely generated on the day.</p>

<p>So the two talks I have given at LRUG have been entitled Ruby Poetry and <a href="http://rubygolf-presentation.heroku.com">Ruby Golf</a>.  What Ruby &lt;insert word here&gt; should I do next?</p>

<br/>


<p><strong><a href='http://tribesports.com'>Tribesports</a> is hiring developers in London.  <a href='http://techblog.tribesports.com/join-the-tribe'>Find out more here.</a></strong></p>
]]></content>
  </entry>
  
</feed>
